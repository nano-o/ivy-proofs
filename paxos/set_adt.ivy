#lang ivy1.7
include order
include collections

module set(index,elem) =
{
    type this
    alias t = this
    object val_opt_t = {
    	type this = struct {
       	    present : bool,
       	    value : elem
    	}
    }
    relation member(E:elem,X:t)
    relation emptyrel(E:elem,X:t)
    relation endcomp(R1:t, R2:t)
    action emptyset returns(s:t)
    action add(s:t,e:elem) returns (s:t)
    action getvalueatind(s:t,i:index) returns (e:elem)
    action getend(s:t) returns (i:index) 
    specification
    {
          after emptyset
          {
                assert ~member(X,s)
          }
          after add
          {
              assert member(X,s) <-> (member(X,old s) | X = e)
          }

    }
    implementation
    {
	 instance arr:array(index,elem)
	 destructor repr(X:t) : arr

	 definition member(y:elem,X:t) = exists Z. 0 <= Z & Z < repr(X).end & repr(X).value(Z) = y
         implement emptyset
         {
             repr(s) := arr.create(0,0);
         }
         implement add
         {
             if ~member(e,s)
             {
		  repr(s) := arr.resize(repr(s),index.next(arr.end(repr(s))),e)
             }
         }
	 implement getend
	 {
	     i := repr(s).end;
	 }
	 implement getvalueatind
	 {
	     e := arr.get(repr(s),i);
	 }
    }
    isolate iso = this with index
}

