#lang ivy1.7

#TODO: Prove validity!

include order

type node
type value
type quorum
instance round : unbounded_sequence

relation member(N:node, Q:quorum)
trusted isolate quorum_intersection = {
    axiom forall Q1, Q2. exists N. member(N, Q1) & member(N, Q2)
}

# first, the absract protocol:
isolate abs = {
    relation left_rnd(N:node, R:round)
    relation proposal(R:round, V:value)
    relation vote(N:node, R:round, V:value)
    relation decision(N:node, R:round, V:value)

    after init {
        left_rnd(N,R) := false;
        proposal(R,V) := false;
        vote(N,R,V) := false;
        decision(N,R,V) := false;
    }

    action join_round(n:node, r:round) = {
        require ~left_rnd(n,r);
        left_rnd(n,R) := left_rnd(n,R) | R < r
    }

    action propose(r:round, q:quorum, maxr:round, v:value) = {
        require ~proposal(r,V);
        require forall N, R . member(N, q) & R < r -> left_rnd(N,R);

        # find the maximal max_vote in the quorum
        require ((forall N,R,V. ~(member(N, q) & R < r & vote(N,R,V))) | (
           (exists N. member(N, q) & maxr < r & vote(N,maxr,v)) &
           (forall N,R,V. (member(N, q) & R  < r & vote(N,R,V)) -> R <= maxr))
        );
        proposal(r, v) := true
    }

    action cast_vote(n:node, v:value, r:round) = {
        require ~left_rnd(n,r);
        require proposal(r, v);
        vote(n, r, v) := true
    }

    action decide(n:node, r:round, v:value, q:quorum) = {
        require forall N . member(N, q) -> vote(N, r, v);
        decision(n, r, v) := true
    }

    specification {
        # safety property:
        conjecture (
            decision(N1,R1,V1) &
            decision(N2,R2,V2)
        ) -> V1 = V2
    }

    private {
        # proposals are unique per round
        conjecture proposal(R,V1) & proposal(R,V2) -> V1 = V2

        # only vote for proposed values
        conjecture vote(N,R,V) -> proposal(R,V)

        # decisions come from quorums of votes:
        conjecture forall R, V. (exists N. decision(N,R,V)) -> exists Q. forall N. member(N, Q) -> vote(N,R,V)

        # Properties of choosable and proposal
        conjecture forall R1, R2, V1, V2, Q. R1 < R2 & proposal(R2,V2) & V1 ~= V2 ->
            exists N . member(N,Q) & left_rnd(N,R1) & ~vote(N,R1,V1)

    }

} with round, quorum_intersection

# now the more concrete specification:
isolate protocol = {

    # We now introduce explicit one_b messages that contain the maximum round at which the sender voted and the corresponding value.

    # note that round 0 is never "used" because 1b messages with round 0 are rejected and thus no leader can execute phase 2a for round 0.

    relation one_a(R:round)
    relation one_b(N:node, R:round, MAXR:round, MAXV:value)
    individual current_round(N:node) : round
    relation proposal(R:round, V:value)
    relation vote(N:node, R:round, V:value)
    relation decision(N:node, R:round, V:value)

    after init {
        one_a(R) := false;
        one_b(N,R,MAXR,V) := false;
        current_round(N) := 0;
        proposal(R,V) := false;
        vote(N,R,V) := false;
        decision(N,R,V) := false;
    }

    action send_1a(r:round) = {
        one_a(r) := true;
    }

    action send_1b(n:node, r:round, maxr:round, maxv:value) = {
        assume current_round(n) < r;
        assume one_a(r);
        assume ((maxr = 0 & forall R,V. ~(R < r & vote(n,R,V))) |
           (maxr ~= 0 & (maxr < r & vote(n,maxr,maxv)) &
           (forall R,V. (R  < r & vote(n,R,V)) -> R <= maxr))
        );
        current_round(n) := r;
        one_b(n,r,maxr,maxv) := true;
        call abs.join_round(n,r)
    }

    action propose(r:round, q:quorum, maxr:round, v:value) = {
        assume ~proposal(r,V);
        assume forall N. member(N, q) -> exists MAXR,V. one_b(N,r,MAXR,V);

        # find the maximal vote in the quorum
        # here, compared to the protocol isolate, the leader uses the contents of the one_b messages instead of the vote relation
        assume ((forall N. member(N, q) -> exists V . one_b(N,r,0,V)) | (
           (exists N. member(N, q) & maxr < r & one_b(N,r,maxr,v)) &
           (forall N,R,V. (member(N, q) & R  < r & one_b(N,r,R,V)) -> R <= maxr))
        );
        proposal(r, v) := true;
        call abs.propose(r, q, maxr, v)
    }

    action cast_vote(n:node, v:value, r:round) = {
        assume current_round(n) = r;
        assume proposal(r, v);
        vote(n, r, v) := true;
        call abs.cast_vote(n, v, r)
    }

    action decide(n:node, r:round, v:value, q:quorum) = {
        assume forall N . member(N, q) -> vote(N, r, v);
        decision(n, r, v) := true;
        call abs.decide(n, r, v, q)
    }

    export send_1a
    export send_1b
    export propose
    export cast_vote
    export decide

    specification {
        # safety property:
        conjecture [safety] (
          decision(N1,R1,V1) &
          decision(N2,R2,V2)
        ) -> V1 = V2
    }

    private {
        conjecture current_round(N) = R & R <= R2 -> ~abs.left_rnd(N,R2)
        conjecture current_round(N) = R & R2 < R -> abs.left_rnd(N,R2)
        conjecture vote(N,R,V) <-> abs.vote(N,R,V)
        conjecture decision(N,R,V) <-> abs.decision(N,R,V)
        conjecture proposal(R,V) <-> abs.proposal(R,V)
        conjecture one_b(N,R,MAXR,V) & current_round(N) = R2 -> R2 >= R
        conjecture one_b(N,R,MAXR,V) & MAXR ~= 0 -> abs.vote(N,MAXR,V) & (forall R2,V.  (MAXR < R2 & R2 < R -> ~abs.vote(N,R2,V)))
        conjecture one_b(N,R,0,V) & R2 < R -> ~abs.vote(N,R2,V2)
        conjecture one_b(N,R,MAXR,V) -> MAXR < R
    }

} with abs, round, quorum_intersection
