#lang ivy1.8

include order
include udp
include array_set

instance node : iterable
type value
type quorum
instance round : unbounded_sequence

relation member(N:node, Q:quorum)
trusted isolate quorum_intersection = {
    axiom forall Q1, Q2. exists N. member(N, Q1) & member(N, Q2)
}

# first, the absract protocol:
isolate abs = {
    relation left_rnd(N:node, R:round) # true for rounds we left, and false for the current round, but otherwise unconstrained
    relation proposal(R:round, V:value) # a leader (implicit) proposes a value for the round
    relation vote(N:node, R:round, V:value) # a node votes on a value for the round
    relation decision(N:node, R:round, V:value)

    after init {
        left_rnd(N,R) := false;
        proposal(R,V) := false;
        vote(N,R,V) := false;
        decision(N,R,V) := false;
    }

    action join_round(n:node, r:round) = {
        require ~left_rnd(n,r);
        left_rnd(n,R) := left_rnd(n,R) | R < r
    }

    action propose(r:round, q:quorum, maxr:round, v:value) = {
        require ~proposal(r,V); # no proposal has been made in round r
        require forall N, R . member(N, q) & R < r -> left_rnd(N,R); # members of q have left all rounds smaller than r

        require ((forall N,R,V. ~(member(N, q) & R < r & vote(N,R,V))) | ( # no member of q has voted before r, or
           (exists N. member(N, q) & maxr < r & vote(N,maxr,v)) & # a member of q has voted for v in round maxr < r, and
           (forall N,R,V. (member(N, q) & R  < r & vote(N,R,V)) -> R <= maxr)) # all votes by members of q cast before round r were cast no later than round maxr
        );
        proposal(r, v) := true
    }

    action cast_vote(n:node, v:value, r:round) = {
        require ~left_rnd(n,r);
        require proposal(r, v);
        vote(n, r, v) := true
    }

    action decide(n:node, r:round, v:value, q:quorum) = {
        require forall N . member(N, q) -> vote(N, r, v);
        decision(n, r, v) := true
    }

    specification {
        # safety property:
        conjecture (
            decision(N1,R1,V1) &
            decision(N2,R2,V2)
        ) -> V1 = V2
    }

    private {
        # proposals are unique per round
        conjecture proposal(R,V1) & proposal(R,V2) -> V1 = V2

        # only vote for proposed values
        conjecture vote(N,R,V) -> proposal(R,V)

        # decisions come from quorums of votes:
        conjecture forall R, V. (exists N. decision(N,R,V)) -> exists Q. forall N. member(N, Q) -> vote(N,R,V)

        # Properties of choosable and proposal
        conjecture forall R1, R2, V1, V2, Q. R1 < R2 & proposal(R2,V2) & V1 ~= V2 ->
            exists N . member(N,Q) & left_rnd(N,R1) & ~vote(N,R1,V1)

    }

} with round, quorum_intersection

# now the more concrete, but still abstract, specification:
isolate protocol = {

    # We now introduce explicit one_b messages that contain the maximum round at which the sender voted and the corresponding value.

    # note that round 0 is never "used" because 1b messages with round 0 are rejected and thus no leader can execute phase 2a for round 0.

    relation one_a(R:round)
    relation one_b(N:node, R:round, VOTED:bool, MAXR:round, MAXV:value)
    individual current_round(N:node) : round
    relation proposal(R:round, V:value) # 2a
    relation vote(N:node, R:round, V:value) # 2b
    relation decision(N:node, R:round, V:value)

    after init {
        one_a(R) := false;
        one_b(N,R,VOTED,MAXR,V) := false;
        current_round(N) := 0;
        proposal(R,V) := false;
        vote(N,R,V) := false;
        decision(N,R,V) := false;
    }

    action send_1a(r:round) = {
        one_a(r) := true;
    }

    action send_1b(n:node, voted:bool, maxr:round, maxv:value) = {
        require maxr < current_round(n);
        require one_a(current_round(n));
        require ((~voted & forall R,V. ~(R < current_round(n) & vote(n,R,V))) |
           voted &
           (maxr ~= 0 & (maxr < current_round(n) & vote(n,maxr,maxv)) &
           (forall R,V. (R  < current_round(n) & vote(n,R,V)) -> R <= maxr))
        );
        one_b(n,current_round(n),voted,maxr,maxv) := true;
        call abs.join_round(n,current_round(n))
    }

    action propose(r:round, q:quorum, maxr:round, v:value) = {
        require ~proposal(r,V);
        require forall N. member(N, q) -> exists VOTED,MAXR,V. one_b(N,r,VOTED,MAXR,V);

        # find the maximal vote in the quorum
        # here, compared to the protocol isolate, the leader uses the contents of the one_b messages instead of the vote relation
        require ((forall N. member(N, q) -> exists MAXR,V . one_b(N,r,false,MAXR,V)) | (
           (exists N. member(N, q) & maxr < r & one_b(N,r,TRUE,maxr,v)) &
           (forall N,R,V. (member(N, q) & R  < r & one_b(N,r,TRUE,R,V)) -> R <= maxr))
        );
        proposal(r, v) := true;
        call abs.propose(r, q, maxr, v)
    }

    action cast_vote(n:node, v:value, r:round) = {
        require current_round(n) = r;
        require proposal(r, v);
        vote(n, r, v) := true;
        call abs.cast_vote(n, v, r)
    }

    action decide(n:node, r:round, v:value, q:quorum) = {
        require forall N . member(N, q) -> vote(N, r, v);
        decision(n, r, v) := true;
        call abs.decide(n, r, v, q)
    }

    export send_1a
    export send_1b
    export propose
    export cast_vote
    export decide

    specification {
        # safety property:
        conjecture [safety] (
          decision(N1,R1,V1) &
          decision(N2,R2,V2)
        ) -> V1 = V2
    }

    private {
        invariant current_round(N) = R & R <= R2 -> ~abs.left_rnd(N,R2)
        invariant current_round(N) = R & R2 < R -> abs.left_rnd(N,R2)
        invariant vote(N,R,V) <-> abs.vote(N,R,V)
        invariant decision(N,R,V) <-> abs.decision(N,R,V)
        invariant proposal(R,V) <-> abs.proposal(R,V)
        # TODO: fix the invariants below
        # invariant one_b(N,R,MAXR,V) & current_round(N) = R2 -> R2 >= R
        # invariant one_b(N,R,MAXR,V) & MAXR ~= 0 -> abs.vote(N,MAXR,V) & (forall R2,V.  (MAXR < R2 & R2 < R -> ~abs.vote(N,R2,V)))
        # invariant one_b(N,R,0,V) & R2 < R -> ~abs.vote(N,R2,V2)
        # invariant one_b(N,R,MAXR,V) -> MAXR < R
    }

} with abs, round, quorum_intersection

isolate interface(n:node) = {
    export action propose(v:value)
    import action decide(v:value)
    specification {
        relation proposed(V:value)
        relation decided(V:value)
        after init {
            proposed(V) := false;
            decided(V) := false;
        }
        after propose {
            proposed(v) := true;
        }
        before decide {
            require exists N. interface.proposed(N,v);
            require interface.decided(N,V) -> V = v;
            decided(v) := true;
        }
        invariant interface.decided(N1,V1) & interface.decided(N2,V2) -> V1 = V2
    }
}

object msg_kind = {
    type this = {
        1a, # broadcast proposer→acceptors "prepare"
        1b, # unicast acceptor→proposer (reply) "promise"
        2a, # broadcast proposer→acceptors "propose"/"accept"
        2b  # broadcast acceptor→learners "decide"/"vote"
    }
}
type msg = struct {
    m_sender : node,      # used by all messages
    m_kind : msg_kind,    # used by all messages
    m_currnd : round,     # used by all messages
    m_prop_isset : bool,  # used by
    m_prop_round : round, # used by
    m_prop_value : value  # used by
}

instance net : udp_simple(node, msg)
instance node_set : array_set_with_majority(node)

isolate impl = {
    # TODO: hook up to the abstract_protocol, isolate=protocol, by making calls to its actions

    # TODO: tie state of impl to isolate=protocol using invariants

    invariant net.spec.sent(M, DST) & m_kind(M) = msg_kind.1a -> m_sender(M) = leader_of(m_currnd(M))
    invariant net.spec.sent(M, DST) & m_kind(M) = msg_kind.1b -> DST = leader_of(m_currnd(M))
    invariant net.spec.sent(M, DST) & m_kind(M) = msg_kind.2a -> m_sender(M) = leader_of(m_currnd(M))
    # all the values in 2b (vote) proposals will be the same because acceptors
    # only vote for the leader's prposed value (and there's only one leader)

    invariant net.spec.sent(M, DST) & m_kind(M) = msg_kind.1a -> protocol.one_a(m_currnd(M))
    invariant server.currnd(N) = protocol.current_round(N)
    #invariant relate to vote

    # TODO: need some property of leader_of to say that it will be `self`
    # for some round(s)
    function leader_of(R:round):node
    # ASSUMPTION: all nodes use the same leader_of function (so that only
    # one value is proposed by one node in each round)

    object server(self:node) = {

        ### state variables

        # proposer state reinitialized every join_round
        function sent_2a: bool
        function currnd_1b: node_set.t
        function currnd_2b: node_set.t

        function learned: bool # initialized once by init and flipped true in handle_2b
        function currnd: round # reinitialized every join_round

        # optional: proposal being considered in currnd
        function maxrndprop_isset: bool  # initialized once by init and flipped true in several places
        function maxrndprop_round: round # initialized by handle_1b (as proposer, from promises) or handle_2a (as acceptor, from a proposal)
        function maxrndprop_value: value # initialized by handle_1b (as proposer, from promises) or handle_2a (as acceptor, from a proposal)

        # optional: client proposal
        function clientprop_isset: bool  # initialized once by init and flipped true in interface.propose
        function clientprop_value: value # initialized once by interface.propose

        ### transition actions

        # internal
        after init {
            maxrndprop_isset := false;
            clientprop_isset := false;
            learned := false;
            currnd := 0;
            # FIXME: for ivy_check you cannot call join_round in init, so to
            # start manual testing use impl.server.timeout
            #call join_round(1);
        }

        # environment interface
        export action timeout = {
            call join_round(currnd.next());
        }

        # internal (called by init, timeout, or net.recv)
        action join_round(r:round) = {
            assert currnd < r | 1 = r;
            currnd := r;
            if self = leader_of(r) {
                sent_2a := false;
                currnd_1b := node_set.emptyset();
                currnd_2b := node_set.emptyset();
                call send_1a();
            }
        }

        # client interface
        implement interface.propose(v:value) {
            if ~clientprop_isset {
                clientprop_isset := true;
                clientprop_value := v;
            }
        }

        # environment interface
        implement net.recv(m:msg) {
            # if we are behind, fast forward our round
            if currnd < m.m_currnd { join_round(m.m_currnd); }

            # if the message is behind ignore it, else dispatch it
            if m.m_currnd < currnd { }
            else if m.m_kind = msg_kind.1a { call handle_1a(m); }
            else if m.m_kind = msg_kind.1b { call handle_1b(m); }
            else if m.m_kind = msg_kind.2a { call handle_2a(m); }
            else if m.m_kind = msg_kind.2b { call handle_2b(m); }
        }

        # internal/helper
        action new_msg(k:msg_kind) returns (m:msg) = {
            m.m_sender := self;
            m.m_kind := k;
            m.m_currnd := currnd;
        }

        # internal/helper
        action broadcast(m:msg) = {
            var it := node.iter.begin();
            while ~it.is_end
            invariant node.iter.done(N, it) -> net.spec.sent(m, N)
            invariant net.spec.sent(M,N) & ~(old net.spec.sent(M,N)) -> M = m
            {
                call net.send(self, it.val, m);
                it := it.next();
            }
        }

        ### PREPARE

        # internal (called by join_round)
        action send_1a = {
            var prep := new_msg(msg_kind.1a);
            call broadcast(prep);
            call protocol.send_1a(currnd);
        }
        # internal (called in response to network)
        action handle_1a(prep:msg) = {
            assert prep.m_kind = msg_kind.1a;
            assert prep.m_currnd = currnd;
            assert prep.m_sender = self | self ~= leader_of(prep.m_currnd);
            call send_1b(prep.m_sender);
        }

        ### PROMISE

        # internal (called by handle_1a)
        action send_1b(dst:node) = {
            var prom := new_msg(msg_kind.1b);
            prom.m_prop_isset := maxrndprop_isset; # XXX might be false; that's ok
            prom.m_prop_round := maxrndprop_round; # XXX might be uninitialized; that's ok
            prom.m_prop_value := maxrndprop_value; # XXX might be uninitialized; that's ok
            call net.send(self, dst, prom);
            call protocol.send_1b(
                self,
                maxrndprop_isset,
                maxrndprop_round,
                maxrndprop_value);
        }
        # internal (called in response to network)
        action handle_1b(prom:msg) = {
            assert prom.m_kind = msg_kind.1b;
            assert prom.m_currnd = currnd;
            assert self = leader_of(currnd);
            currnd_1b := node_set.add(currnd_1b, prom.m_sender);
            if prom.m_prop_isset & (~maxrndprop_isset | maxrndprop_round < prom.m_prop_round) {
                maxrndprop_isset := true;
                maxrndprop_round := prom.m_prop_round;
                maxrndprop_value := prom.m_prop_value;
            }
            if ~sent_2a & node_set.majority(currnd_1b) {
                sent_2a := true; # FIXME: move this down into send_2a next to the broadcast call
                call send_2a();
            }
        }

        ### PROPOSE

        # internal (called by handle_1b)
        action send_2a = {
            var prop := new_msg(msg_kind.2a);
            prop.m_prop_isset := true;
            prop.m_prop_round := currnd; # XXX not the round where maxrndprop_value was introduced
            prop.m_prop_value := maxrndprop_value if maxrndprop_isset else clientprop_value;
            if maxrndprop_isset | clientprop_isset {
                call broadcast(prop);
            }
        }
        # internal (called in response to network)
        action handle_2a(prop:msg) = {
            assert prop.m_kind = msg_kind.2a;
            assert prop.m_currnd = currnd;
            # since there is only one leader per round, and the leader can
            # broadcast only one 2a message, we will only handle one 2a
            # message, therefore we accept that proposal
            maxrndprop_isset := true;
            maxrndprop_round := prop.m_prop_round; # XXX aka currnd
            maxrndprop_value := prop.m_prop_value;
            send_2b();
        }

        ### VOTE

        # internal (called by handle_2a)
        action send_2b = {
            var vote := new_msg(msg_kind.2b);
            vote.m_prop_isset := true;
            vote.m_prop_round := maxrndprop_round; # XXX aka currnd
            vote.m_prop_value := maxrndprop_value;
            broadcast(vote);
        }
        # internal (called in response to network)
        action handle_2b(vote:msg) = {
            assert vote.m_kind = msg_kind.2b;
            assert vote.m_currnd = currnd;
            currnd_2b := node_set.add(currnd_2b, vote.m_sender);
            if ~learned & node_set.majority(currnd_2b) {
                learned := true;
                call interface.decide(self, vote.m_prop_value);
            }
        }
    }
} with round, node_set, node, net, interface, protocol

object interpretations = {
    definition impl.leader_of(r:round) = <<< r % (`node.max` + 1) >>>

    interpret value -> bv[8]
}

extract imp(n:node) = impl.server(n), round, node_set, node, interpretations, net(n)
