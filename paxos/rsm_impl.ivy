#lang ivy1.7

# Goal: implement a replicated state-machine (RSM) based on Paxos

include order
include collections

type value_t
instance inst_t: unbounded_sequence

object value_opt_t = {
    type this = struct {
        present : bool,
        value : value_t
    }
}

instance node : iterable

object service_interface(n : node) = {
    export action propose(v:value_t) # the environment, i.e. a client application, calls this
    import action notify_decision(i:inst_t, v:value_t) # this is a call out to the environement
    export action query(i:inst_t) returns (v:value_opt_t) # the environment, i.e. a client application, calls this
    specification {
        relation proposed(V:value_t)
        relation log(I:inst_t,V:value_t)
        invariant log(I,V1) & log(I,V2) -> V1 = V2 #an instruction cannot have more than one distinct value
	after init {
		proposed(V) := false;
		log(I,V) := false;
	}
        before notify_decision {
            require proposed(v);
            require log(i,V) -> V = v;
            log(i,v) := true;
        }
	before propose {
	    proposed(v) := true;
	}
        after query {
            ensure v.present -> log(i,v.value);
        }
    }
    isolate iso = this 
}

object service_implementation(n : node) = {
    instance arr:array(inst_t,value_t)
    individual my_log:arr
    after init
    {
	my_log := arr.empty();
    }
    implement service_interface.propose(v:value_t) {
	var i := arr.end(my_log);
	my_log := arr.append(my_log,v);
	call service_interface.notify_decision(n,i,v);	
    }

    implement service_interface.query(i:inst_t) {
	if i >= arr.end(my_log)
	{
	    v.present := false;
	}
	else
	{
	     v.value := arr.get(my_log,i);
	}
    }
    invariant (service_interface.proposed(n,V) & (arr.value(my_log,I) = V) & (I < arr.end(my_log))) <->  service_interface.log(n,I,V)
    invariant ((arr.value(my_log,I) = V) & (I < arr.end(my_log))) <-> service_interface.log(n,I,V)
    isolate iso = this with service_interface, inst_t, arr
}

# interpret values as strings:
interpret value_t -> strlit

extract impl = service_implementation, inst_t

# generate and compile with `ivyc isolate=impl rsm_impl.ivy`
