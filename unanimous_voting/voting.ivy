#lang ivy1.8

include order
include udp
include collections
include array_set

type value
instance node : iterable

isolate interface(n:node) = {
    export action propose(v:value)
    import action decide(v:value)
    specification {
        relation decided(V:value)
        after init {
            decided(V) := false
        }
        before decide {
            require interface.decided(N,V) -> V = v;
            decided(v) := true;
        }
        invariant interface.decided(N1,V1) & interface.decided(N2,V2) -> V1 = V2
    }
}

isolate abstract_protocol = {
    relation vote(N:node, V:value)
    relation decided(N:node, V:value)
    after init {
        vote(N,V) := false;
        decided(N,V) := false;
    }
    action do_vote(n:node,v:value) = {
        require ~vote(n,V);
        vote(n,v) := true;
    }
    action decide(n:node, v:value) = {
        require vote(N,v);
        decided(n,v) := true
    }
    invariant decided(N1,V1) & decided(N2,V2) -> V1 = V2
}

type msg = struct {
    sender : node,
    val : value
}

instance net : udp_simple(node, msg)

instance node_set : array_set(node)

isolate protocol = {

    object server(self:node) = {

        function voted: bool
        function candidate: value # first value a node votes for
        function voted_for_candidate: node_set.t

        after init {
            voted := false;
            var empty := node_set.emptyset();
            voted_for_candidate := empty;
        }

        implement interface.propose(v:value) {
            if ~voted { # if we have not voted yet
                call do_vote(v);
            };
        }

        action do_vote(v:value) = {
            call abstract_protocol.do_vote(self,v);
            candidate := v; # remember that we are trying to decide v
            voted_for_candidate := node_set.add(voted_for_candidate, self);
            # broadcast a vote message:
            var m:msg;
            m.sender := self;
            m.val := v;
            var dst := node.iter.begin();
            while ~dst.is_end {
                call net.send(self, dst.val, m);
                dst := dst.next();
            };
            voted := true; # remember that we voted
        }

        implement net.recv(m:msg) {
            # if not voted yet, vote for the value in the message:
            if ~voted {
                call do_vote(m.val);
            };
            if candidate = m.val {
                voted_for_candidate := node_set.add(voted_for_candidate, m.sender);
            };
            if node_set.is_universal(voted_for_candidate) {
                call abstract_protocol.decide(self, candidate);
                call interface.decide(self, candidate);
            };
        }
    }
} with interface, net, node, node_set, abstract_protocol

interpret value -> bv[1]

extract impl(n:node) = protocol.server(n), net(n), node, node_set
