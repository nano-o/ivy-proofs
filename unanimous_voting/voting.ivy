#lang ivy1.8

include order
include udp
include collections
include array_set

type value
instance node : iterable

isolate interface(n:node) = {
    export action propose(v:value)
    import action decide(v:value)
    specification {
        relation decided(V:value)
        after init {
            decided(V) := false
        }
        before decide {
            require interface.decided(N,V) -> V = v;
            decided(v) := true;
        }
        invariant interface.decided(N1,V1) & interface.decided(N2,V2) -> V1 = V2
    }
}

isolate abstract_protocol = {
    relation vote(N:node, V:value)
    relation decided(N:node, V:value)
    after init {
        vote(N,V) := false;
        decided(N,V) := false;
    }
    action do_vote(n:node,v:value) = {
        vote(n,v) := true;
    }
    action decide(n:node, v:value) = {
        require vote(N,v);
        decided(n,v) := true
    }
    invariant decided(N1,V1) & decided(N2,V2) -> V1 = V2
}

isolate system = {
    interpret value -> bv[1]
    type msg = struct {
        sender : node,
        val : value
    }

    instance net : udp_simple(node, msg)

    instance node_set : array_set(node)

    # NOTE tried a parameterized object `protocol(self:node)` but then `implement net.recv(v:value)` does not work (ivy complains about a wrong number of parameters).
    isolate protocol = {

        function voted(N:node): bool
        function candidate(N:node): value # first value a node votes for
        function voted_for_candidate(N:node): node_set.t

        after init {
            voted(N) := false;
            var empty := node_set.emptyset();
            voted_for_candidate(N) := empty;
        }

        implement interface.propose(self:node, v:value) {
            if ~voted(self) { # if we have not voted yet
                call do_vote(self, v);
            };
        }

        action do_vote(self:node, v:value) = {
            candidate(self) := v; # remember that we are trying to decide v
            voted_for_candidate(self) := node_set.add(voted_for_candidate(self), self);
            # broadcast a vote message:
            var m:msg;
            m.sender := self;
            m.val := v;
            var dst := node.iter.begin();
            while ~dst.is_end {
                call net.send(self, dst.val, m);
                dst := dst.next();
            };
            voted(self) := true; # remember that we voted
        }

        implement net.recv(self:node, m:msg) {
            # if not voted yet, vote for the value in the message:
            if ~voted(self) {
                call do_vote(self, m.val);
            };
            if candidate(self) = m.val {
                voted_for_candidate(self) := node_set.add(voted_for_candidate(self), m.sender);
            };
            if node_set.is_universal(voted_for_candidate(self)) {
                call interface.decide(self, candidate(self));
            };
        }
    } with interface, net, node, node_set
}

extract impl(n:node) = system.protocol(n), system.net(n), node, system.node_set
