#lang ivy1.7

# This file contains a specification and implementation of node sets with a majority test.
# 

include order
include collections

instance node : iterable

# node sets

trusted isolate nset = {

    type this
    alias t = this
    type index

    relation member(N:node, S:t)
    relation majority(S:t)

    action emptyset returns (s:t) 
    action add(s:t, n : node) returns (s:t) 

    specification {
        after emptyset {
            ensure ~member(N, s)
        }

        after add {
            ensure member(N,s) <-> (member(N , old s) | N = n)
        }
    }

    # This invariant has quantifier alternation, thus we make it private. It can always be used explitely in a with clause
    private {   
        invariant [majorities_intersect]
        (majority(S) & majority(T)) -> exists N. member(N,S) & member(N,T)
    }

    implementation {
        interpret index -> int
        function card(S:t) : index
        instance arr : rel_array(index,node)
        destructor repr(N:nset) : arr
        individual all : nset
	
        definition member(N,S) = exists I. 0 <= I & I < repr(S).end & repr(S).value_is(I, N)
        definition majority(S) = card(S) + card(S) > card(all)

        after init {
            card(S) := 0;
            repr(all) := arr.empty;
            var i := node.iter.create(0);
            while ~i.is_end
                invariant (forall N.~(member(N,S) & member(N,T))) ->
                              card(S) + card(T) <= card(all)
                invariant node.iter.done(N,i) <-> member(N,all)
                invariant card(S) >= 0
            {
                repr(all) := repr(all).append(i.val);
        	      card(S) := card(S) + 1 if member(i.val, S) else card(S);
                i := i.next
            };
        }

        implement emptyset {
            repr(s) := arr.empty()
        }

        implement add {
            if ~member(n, s) {
                repr(s) := repr(s).append(n)
            }
        }
    }
    
} with node

# export nset.emptyset
# export nset.add

# extract code = nset, node
