#lang ivy1.8

# a set datatype with an is_quorum predicate indicating whether a quorum exists
# for the nodes in the set and is agreeable to the specified node (the node
# type must be an iterable)

include collections
include order

module array_map_with_qset_quorum_check(domain, range) = {
    # domain must be an instance of iterable
    # range must be an instance of qset

    type this
    alias t = this

    relation member(E:domain, S:t)
    relation is_quorum(E:domain, S:t)

    action emptyset returns (s:t)
    action add(s:t, k: domain, v: range) returns (s:t)

    specification {
        after emptyset {
            ensure ~member(E, s)
        }

        after add {
            ensure member(E,s) = (member(E , old s) | E = k)
        }

    }

    implementation {
        instance arr : array(index, domain)
        instance arr2 : array(index, range)
        type soa = struct {ks : arr, vs : arr2}
        destructor repr(S:this): soa # XXX it would be simpler to use the old `repr(…): arr` and an ivy function domain→range
        definition member(E,S) = exists I. 0 <= I & I < repr(S).ks.end & repr(S).ks.value(I) = E
        # XXX should we have an invariant that states the arrays are the same size?

        function index_of(K:domain): index

        implement emptyset {
            repr(s).ks := arr.empty();
            repr(s).vs := arr2.empty();
        }

        implement add {
            if member(k, s) {
                repr(s).vs := repr(s).vs.set(index_of(k), v);
            } else {
                index_of(k) := repr(s).ks.size();
                repr(s).ks := repr(s).ks.append(k);
                repr(s).vs := repr(s).vs.append(v);
            }
        }

        <<< impl
        // we must define this conversion here because paxos::qset isn't in scope in libscp/PaxosAdapter.hpp
        std::vector<stellar::SCPQuorumSet> ivyqsets_to_qsets(std::vector<paxos::qset> const& xs)
        {
            std::vector<stellar::SCPQuorumSet> out(xs.begin(), xs.end());
            return out;
        }
        >>>
    }

    trusted isolate is_quorum_iso = {
        explicit invariant [quorums_intersect]
            (exists E1, E2. is_quorum(E1, S1) & is_quorum(E2, S2)) -> exists N . member(N,S1) & member(N,S2)
        # Terminology:
        #   slice : {node}
        #   quorum : {node}
        #   quorum-set : {slice}
        #   nodes-slices, quorum-set-configuration : node → quorum-set
        #
        # ∀ {node} n {node} ≠ ∅
        #
        # This might not hold for some quorum-set configs. To be sure, we'd
        # want to check it manually at runtime each time the
        # quorum-set-configuration changes. Even if you did that, your local
        # information might be insufficient, and so it might not hold if you
        # had all distributed information. Therefore we take as an assumption.
        #
        # is_quorum(S:quorum, L:node) : bool
        #
        # A quorum is only useful to the current node if it's a quorum /and/
        # the current node recognizes it (if the quorum contains one of this
        # node's slices).

        implementation {
            # C++ implementation
            definition is_quorum(n:domain, s:t) =
                <<<paxos_adapter::is_quorum(`n`, `s`.repr.ks, ivyqsets_to_qsets(`s`.repr.vs))>>>
        }
    }

    isolate iso = this with domain
}

# uncomment to check in isolation:
# instance elem : iterable
# instance elem_set : array_set_with_majority(elem)
# export elem_set.emptyset
# export elem_set.add

# use this to make ivyc emit code for the majority function:
# export action test(s:elem_set) returns (res:bool) = {
    # res := elem_set.majority(s);
# }
