#lang ivy1.8

module scp_nodeid = {
    type this
    alias t = this
}

module scp_qset = {
    type this
    alias t = this

    action load returns (s:t)

    specification {
    }

    implementation {
        interpret t -> <<< paxos_adapter::AdaptedQSet >>>

        implement load {
            <<<
            std::fstream str("qset_config.json");
            `s`.paxos_adapter::AdaptedQSet::operator=(load_jqset(str));
            >>>
        }

        <<< impl

        template<>
        void __ser<`t`>(ivy_ser& res, `t` const& qs)
        {
            std::string s = qs.encode();
            auto xs = paxos_adapter::chars_to_llongs(s);
            res.set((long long) s.length());
            res.set((long long) xs.size());
            for (auto const& x: xs) { res.set(x); }
        }

        template<>
        void __deser<`t`>(ivy_deser& inp, `t`& qs)
        {
            long long sl, xsl;
            inp.get(sl);
            inp.get(xsl);
            std::vector<long long> xs;
            for (int i=0; i<xsl; i+=1)
            {
                long long x;
                inp.get(x);
                xs.push_back(x);
            }
            paxos_adapter::AdaptedQSet::decode(paxos_adapter::llongs_to_chars(sl, xs), qs);
        }

        template<>
        `t` _arg<`t`>(std::vector<ivy_value> &args, unsigned idx, long long bound)
        {
            throw "Not implemented";
        }

        >>>

    }
}
