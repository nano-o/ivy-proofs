#lang ivy1.7

# This file contains the specification and proof of a high-level, abstract version of the Multi-Paxos protocol.

include order
include collections

instance round_t : unbounded_sequence
instance inst_t : unbounded_sequence # instances, i.e. positions in the log
type value_t
type node

trusted isolate nset = { # abstract type of node sets
    type this
    alias t = this
    function majority(X:t):bool
    relation member(N:node, X:t)
    specification {
        property [majorities_intersect] majority(X) & majority(Y) -> exists N. member(N,X) & member(N,Y)
    }
}

type vote_t = struct {
   rnd : round_t,
   val: value_t,
   present : bool
}

type log_t = struct { # abstract log datatype
    at(I:inst_t): vote_t,
    end:inst_t
}

isolate multi_paxos = {

    relation left_round(N:node, R:round_t)
    relation proposal(I:inst_t, R:round_t, V:value_t)
    relation vote(N:node, I:inst_t, R:round_t, V:value_t)
    relation decision(I:inst_t, V:value_t)
    relation active(R:round_t)  # the leader of round R has received a quorum of 1b messages and can now propose new values
    function min_inst(R:round_t):inst_t

    after init {
        left_round(N,R) := false;
        proposal(I,R,V) := false;
        vote(N,I,R,V) := false;
        decision(I,V) := false;
        active(R) := R = 0;
    }

    invariant [agreement] decision(I,V1) & decision(I,V2) -> V1 = V2

    # proposals are unique per round
    invariant proposal(I,R,V) -> active(R) & min_inst(R) <= I
    invariant proposal(I,R,V1) & proposal(I,R,V2) -> V1 = V2

    # only vote for proposed values
    invariant vote(N,I,R,V) -> proposal(I,R,V)

    # we make the following invariants private because they have quantifier alternation which we do not want to expose outside this isolate
    private {
        # decisions come from quorums of votes:
        invariant decision(I,V) -> exists Q, R . nset.majority(Q) & forall N. nset.member(N, Q) -> vote(N,I,R,V)

        # if R2>R1 is active, I is greater than R2's min instance, and V is not proposed at I, then V is not choosable at R1
        invariant nset.majority(Q) & R1 < R2 & active(R2) & min_inst(R2) <= I & ~proposal(I,R2,V) -> (
            exists N. nset.member(N,Q) & left_round(N,R1) & ~vote(N,I,R1,V)
        )
    }

    action join_round(n:node, r:round_t) = {
        require ~left_round(n,r);
        left_round(n,R) := left_round(n,R) | R < r;
    }

    action activate_round(r:round_t, q:nset, min_i:inst_t) = { # min_i is the min instance that the leader is going to propose to in round r
        require ~active(r);
        require nset.majority(q);
        require nset.member(N, q) & R < r -> left_round(N,R);
        local l:log_t {
            require l.end <= I & nset.member(N,q) & R < r -> ~vote(N,I,R,V);
            require min_i <= I & I < l.end -> (
                (~l.at(I).present & forall N,R,V. ~(nset.member(N, q) & R < r & vote(N,I,R,V))) |
                (l.at(I).present & l.at(I).rnd < r & proposal(I,l.at(I).rnd,l.at(I).val) & (forall N,R,V.  ~(nset.member(N, q) & l.at(I).rnd < R & R < r & vote(N,I,R,V)))) );
            # send the proposals
            proposal(I, r, V) := proposal(I, r, V) | (min_i <= I & I < l.end & l.at(I).present & V = l.at(I).val)
        };
        # activate the round
        active(r) := true;
        min_inst(r) := min_i;
    }

    action propose(i:inst_t, r:round_t, v:value_t) = {
        # propose a new arbitrary value in an available instance in an active round
        assume active(r) & min_inst(r) <= I;
        assume ~proposal(i, r, V);
        proposal(i, r, v) := true
    }

    action cast_vote(n:node, i:inst_t, r:round_t, v:value_t) = {
        require ~left_round(n,r);
        require proposal(i, r, v);
        vote(n, i, r, v) := true
    }

    action decide(i:inst_t, r:round_t, v:value_t, q:nset) = {
        require nset.majority(q);
        require nset.member(N, q) -> vote(N, i, r, v);
        decision(i, v) := true
    }
}
with nset, round_t, inst_t, log_t

# test

export multi_paxos.decide
export multi_paxos.cast_vote
export multi_paxos.propose
export multi_paxos.join_round
export multi_paxos.activate_round
